# Generated by: Neurodocker version stebo85/issue8
# Latest release: Neurodocker version 0.7.0
# Timestamp: 2020/12/15 02:09:26 UTC
# 
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
# 
#     https://github.com/ReproNim/neurodocker

Bootstrap: docker
From: vnmd/fsl_6.0.3:20200905

%post

    export ND_ENTRYPOINT="/neurodocker/startup.sh"
    apt-get update -qq
    apt-get install -y -q --no-install-recommends \
        apt-utils \
        bzip2 \
        ca-certificates \
        curl \
        locales \
        unzip
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
    dpkg-reconfigure --frontend=noninteractive locales
    update-locale LANG="en_US.UTF-8"
    chmod 777 /opt && chmod a+s /opt
    mkdir -p /neurodocker
    if [ ! -f "$ND_ENTRYPOINT" ]; then
      echo '#!/usr/bin/env bash' >> "$ND_ENTRYPOINT"
      echo 'set -e' >> "$ND_ENTRYPOINT"
      echo 'export USER="${USER:=`whoami`}"' >> "$ND_ENTRYPOINT"
      echo 'if [ -n "$1" ]; then "$@"; else /usr/bin/env bash; fi' >> "$ND_ENTRYPOINT";
    fi
    chmod -R 777 /neurodocker && chmod a+s /neurodocker

    printf '#!/bin/bash\nls -la' > /usr/bin/ll

    chmod +x /usr/bin/ll

    mkdir -p /afm01 /afm02 /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /local /gpfs1 /working /winmounts /state /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch /vnm

    export PATH="/opt/miniconda-latest/bin:$PATH"
    echo "Downloading Miniconda installer ..."
    conda_installer="/tmp/miniconda.sh"
    curl -fsSL --retry 5 -o "$conda_installer" https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash "$conda_installer" -b -p /opt/miniconda-latest
    rm -f "$conda_installer"
    conda update -yq -nbase conda
    conda config --system --prepend channels conda-forge
    conda config --system --set auto_update_conda false
    conda config --system --set show_channel_urls true
    sync && conda clean -y --all && sync
    conda install -y -q --name base \
        "python=3.7" \
        "nipy" \
        "nilearn" \
        "traits" \
        "argh" \
        "joblib" \
        "matplotlib" \
        "numpy" \
        "pandas" \
        "scipy" \
        "seaborn" \
        "statsmodels" \
        "nipype"
    sync && conda clean -y --all && sync
    bash -c "source activate base
      pip install --no-cache-dir  \
          "nibabel" \
          "scikit-image" \
          "pybids==0.6.5" \
          "pynrrd" \
          "duecredit""
    rm -rf ~/.cache/pip/*
    sync


    apt-get update -qq
    apt-get install -y -q --no-install-recommends \
        git \
        zip \
        wget \
        libgtk2.0-0 \
        blender
    apt-get clean
    rm -rf /var/lib/apt/lists/*

    cd /opt

    git clone https://github.com/IBT-FMI/SAMRI.git

    cd /opt/SAMRI

    python setup.py install --user

    mkdir -p /opt/bru2
    cd /opt/bru2

    wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip

    unzip Bru2_Linux.zip

    cd /opt

    echo "Downloading ANTs ..."
    mkdir -p /opt/ants-2.3.4
    curl -fsSL --retry 5 https://dl.dropbox.com/s/gwf51ykkk5bifyj/ants-Linux-centos6_x86_64-v2.3.4.tar.gz \
    | tar -xz -C /opt/ants-2.3.4 --strip-components 1

    git clone https://github.com/IBT-FMI/mouse-brain-atlases_generator.git

    mkdir -p /opt/mouse-brain-atlases_generator
    cd /opt/mouse-brain-atlases_generator

    apt-get update -qq
    apt-get install -y -q --no-install-recommends \
        ed \
        gsl-bin \
        libgl1-mesa-dri \
        libglib2.0-0 \
        libglu1-mesa-dev \
        libglw1-mesa \
        libgomp1 \
        libjpeg62 \
        libnlopt-dev \
        libxm4 \
        multiarch-support \
        netpbm \
        python3 \
        r-base \
        r-base-dev \
        tcsh \
        xfonts-base \
        xvfb
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    curl -sSL --retry 5 -o /tmp/toinstall.deb http://mirrors.kernel.org/debian/pool/main/libx/libxp/libxp6_1.0.2-2_amd64.deb
    dpkg -i /tmp/toinstall.deb
    rm /tmp/toinstall.deb
    curl -sSL --retry 5 -o /tmp/toinstall.deb http://snapshot.debian.org/archive/debian-security/20160113T213056Z/pool/updates/main/libp/libpng/libpng12-0_1.2.49-1%2Bdeb7u2_amd64.deb
    dpkg -i /tmp/toinstall.deb
    rm /tmp/toinstall.deb
    apt-get install -f -y
    apt-get clean
    rm -rf /var/lib/apt/lists/*
    gsl2_path="$(find / -name 'libgsl.so.19' || printf '')"
    if [ -n "$gsl2_path" ]; then
      ln -sfv "$gsl2_path" "$(dirname $gsl2_path)/libgsl.so.0";
    fi
    ldconfig
    echo "Downloading AFNI ..."
    mkdir -p /opt/afni-latest
    curl -fsSL --retry 5 https://afni.nimh.nih.gov/pub/dist/tgz/linux_openmp_64.tgz \
    | tar -xz -C /opt/afni-latest --strip-components 1
    PATH=$PATH:/opt/afni-latest rPkgsInstall -pkgs ALL


    echo '{
    \n  "pkg_manager": "apt",
    \n  "instructions": [
    \n    [
    \n      "base",
    \n      "vnmd/fsl_6.0.3:20200905"
    \n    ],
    \n    [
    \n      "user",
    \n      "root"
    \n    ],
    \n    [
    \n      "_header",
    \n      {
    \n        "version": "generic",
    \n        "method": "custom"
    \n      }
    \n    ],
    \n    [
    \n      "run",
    \n      "printf '"'"'#!/bin/bash\\\nls -la'"'"' > /usr/bin/ll"
    \n    ],
    \n    [
    \n      "run",
    \n      "chmod +x /usr/bin/ll"
    \n    ],
    \n    [
    \n      "run",
    \n      "mkdir -p /afm01 /afm02 /90days /30days /QRISdata /RDS /data /short /proc_temp /TMPDIR /nvme /local /gpfs1 /working /winmounts /state /autofs /cluster /local_mount /scratch /clusterdata /nvmescratch /vnm"
    \n    ],
    \n    [
    \n      "miniconda",
    \n      {
    \n        "use_env": "base",
    \n        "conda_install": [
    \n          "python=3.7",
    \n          "nipy",
    \n          "nilearn",
    \n          "traits",
    \n          "argh",
    \n          "joblib",
    \n          "matplotlib",
    \n          "numpy",
    \n          "pandas",
    \n          "scipy",
    \n          "seaborn",
    \n          "statsmodels",
    \n          "nipype"
    \n        ],
    \n        "pip_install": [
    \n          "nibabel",
    \n          "scikit-image",
    \n          "pybids==0.6.5",
    \n          "pynrrd",
    \n          "duecredit"
    \n        ]
    \n      }
    \n    ],
    \n    [
    \n      "install",
    \n      [
    \n        "git",
    \n        "zip",
    \n        "wget",
    \n        "libgtk2.0-0",
    \n        "blender"
    \n      ]
    \n    ],
    \n    [
    \n      "workdir",
    \n      "/opt"
    \n    ],
    \n    [
    \n      "run",
    \n      "git clone https://github.com/IBT-FMI/SAMRI.git"
    \n    ],
    \n    [
    \n      "workdir",
    \n      "/opt/SAMRI"
    \n    ],
    \n    [
    \n      "run",
    \n      "python setup.py install --user"
    \n    ],
    \n    [
    \n      "workdir",
    \n      "/opt/bru2"
    \n    ],
    \n    [
    \n      "run",
    \n      "wget https://github.com/neurolabusc/Bru2Nii/releases/download/v1.0.20180303/Bru2_Linux.zip"
    \n    ],
    \n    [
    \n      "run",
    \n      "unzip Bru2_Linux.zip"
    \n    ],
    \n    [
    \n      "env",
    \n      {
    \n        "PATH": "$PATH:/opt/bru2:/root/.local/bin"
    \n      }
    \n    ],
    \n    [
    \n      "workdir",
    \n      "/opt"
    \n    ],
    \n    [
    \n      "ants",
    \n      {
    \n        "version": "2.3.4"
    \n      }
    \n    ],
    \n    [
    \n      "run",
    \n      "git clone https://github.com/IBT-FMI/mouse-brain-atlases_generator.git"
    \n    ],
    \n    [
    \n      "workdir",
    \n      "/opt/mouse-brain-atlases_generator"
    \n    ],
    \n    [
    \n      "afni",
    \n      {
    \n        "version": "latest",
    \n        "method": "binaries",
    \n        "install_r_pkgs": "false",
    \n        "install_python3": "false"
    \n      }
    \n    ],
    \n    [
    \n      "env",
    \n      {
    \n        "DEPLOY_BINS": "SAMRI"
    \n      }
    \n    ],
    \n    [
    \n      "copy",
    \n      [
    \n        "README.md",
    \n        "/README.md"
    \n      ]
    \n    ]
    \n  ]
    \n}' > /neurodocker/neurodocker_specs.json

%environment
    export LANG="en_US.UTF-8"
    export LC_ALL="en_US.UTF-8"
    export ND_ENTRYPOINT="/neurodocker/startup.sh"
    export CONDA_DIR="/opt/miniconda-latest"
    export PATH="/opt/miniconda-latest/bin:$PATH"
    export PATH="$PATH:/opt/bru2:/root/.local/bin"
    export ANTSPATH="/opt/ants-2.3.4"
    export PATH="/opt/ants-2.3.4:$PATH"
    export PATH="/opt/afni-latest:$PATH"
    export AFNI_PLUGINPATH="/opt/afni-latest"
    export DEPLOY_BINS="SAMRI"


%runscript
    /neurodocker/startup.sh "$@"
