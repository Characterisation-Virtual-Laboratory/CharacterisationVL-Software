Bootstrap: debootstrap
MirrorURL: http://us.archive.ubuntu.com/ubuntu/
OSVersion:  focal

%labels
    MAINTAINER_NAME  Jay van Schyndel, Luhan Cheng
    MAINTAINER_EMAIL jay.vanschyndel@monash.edu, luhan.cheng@monash.edu

    APPLICATION_NAME pyprismatic

    HARDWARE gpu

    LAST_UPDATED 01-DEC-2020

%environment
    CUDABINPATH=/usr/local/cuda/bin
    CUDALIBPATH=/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib64/:/usr/local/cuda/lib
    export PATH=$PATH:$CUDABINPATH
    export PATH=/opt/conda/bin:$PATH
    export LD_LIBRARY_PATH=$CUDALIBPATH:$LD_LIBRARY_PATH
    export HDF5_MAJOR_REL=hdf5-1.10
    export HDF5_MINOR_REL=hdf5-1.10.6
    export HDF5_SRC_URL=http://support.hdfgroup.org/ftp/HDF5/releases
    export HDF5_ROOT=/usr/local/hdf5/
    export CPLUS_INCLUDE_PATH=/usr/local/hdf5/include:$CPLUS_INCLUDE_PATH
    export LIBRARY_PATH=/usr/local/hdf5/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=/usr/local/hdf5/lib:$LD_LIBRARY_PATH

%post
    echo "*********************************************************"
    echo "Setup and display environment"
    echo "*********************************************************"
    export LC_ALL=en_AU.UTF-8
    export LANGUAGE=en_AU.UTF-8
    export DEBIAN_FRONTEND=noninteractive
    echo $LC_ALL
    echo $LANGUAGE
    echo $DEBIAN_FRONTEND
    echo "*********************************************************"
    echo "Install repositories"
    echo "*********************************************************"
    apt-get install -y software-properties-common
    apt-add-repository -y 'deb http://us.archive.ubuntu.com/ubuntu/ focal main restricted'
    apt-add-repository -y 'deb http://us.archive.ubuntu.com/ubuntu/ focal-updates main restricted'
    apt-add-repository -y 'deb http://us.archive.ubuntu.com/ubuntu/ focal universe'
    apt-add-repository -y 'deb http://us.archive.ubuntu.com/ubuntu/ focal-updates universe'
    echo "*********************************************************"
    echo "Update repositories and install desktop"
    echo "*********************************************************"
    apt update
    apt upgrade -y
    apt install -y locales
    locale-gen en_AU.UTF-8
    apt install -y wget ubuntu-desktop vim software-properties-common git cmake mesa-utils sudo build-essential gpg-agent libboost-all-dev

    echo "*********************************************************"
    echo "Installing CUDA 11.0"
    echo "*********************************************************"
    apt-get install -y g++ freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libglu1-mesa libglu1-mesa-dev mesa-utils libgl1-mesa-glx
    apt-get install -y gcc-10
    cd /tmp
    wget https://developer.download.nvidia.com/compute/cuda/11.0.3/local_installers/cuda_11.0.3_450.51.06_linux.run
    chmod +x cuda_11.0.3_450.51.06_linux.run
    ./cuda_11.0.3_450.51.06_linux.run --silent --toolkit --toolkitpath=/usr/local/cuda-11.0/ --samples --samplespath=/usr/local/cuda-11.0-samples/ --override
    ln -s /usr/local/cuda-11.0 /usr/local/cuda
    ln -s /usr/bin/gcc-6 /usr/local/cuda/bin/gcc
    ln -s /usr/bin/g++-6 /usr/local/cuda/bin/g++

    echo "*********************************************************"
    echo "Installing python dependencies"
    echo "*********************************************************"
    apt install -y python3-pip python3-pyqt5 pyqt5-dev python3-tk qt5-default

    echo "*********************************************************"
    echo "Installing vglrun and TurboVNC"
    echo "*********************************************************"
    wget https://swift.rc.nectar.org.au/v1/AUTH_810/CVL-Singularity-External-Files/turbovnc_2.2.5_amd64.deb
    dpkg -i turbovnc_2.2.5_amd64.deb
    wget https://swift.rc.nectar.org.au/v1/AUTH_810/CVL-Singularity-External-Files/virtualgl_2.6.4_amd64.deb
    dpkg -i virtualgl_2.6.4_amd64.deb
    apt update
    apt -y upgrade


    echo "*********************************************************"
    echo "Installing anaconda"
    echo "*********************************************************"
    PATH=/opt/conda/bin:$PATH

    apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion

    wget --quiet https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh -O ~/anaconda.sh && \
    /bin/bash ~/anaconda.sh -b -p /opt/conda && \
    rm ~/anaconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

    apt-get install -y curl grep sed dpkg && \
    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
    dpkg -i tini.deb && \
    rm tini.deb && \
    apt-get clean


    echo "*********************************************************"
    echo "Installing fftw"
    echo "*********************************************************"

    FFTW_VERSION=3.3.8
    FFTW_MD5=8aac833c943d8e90d51b697b27d4384d


    curl -o fftw.tar.gz http://www.fftw.org/fftw-${FFTW_VERSION}.tar.gz \
    && echo "${FFTW_MD5}  fftw.tar.gz" > fftw.tar.gz.md5 \
    && md5sum -c fftw.tar.gz.md5 \
    && tar -xzvf fftw.tar.gz && cd fftw-${FFTW_VERSION} \
    && ./configure --enable-threads  --enable-float --enable-sse2 --enable-avx --enable-avx2 --enable-avx512 --disable-static --enable-shared \
    && make \
    && make install \
    && rm -rf fftw.tar.gz fftw.tar.gz.md5 fftw-${FFTW_VERSION}




    echo "*********************************************************"
    echo "Installing hdf5"
    echo "*********************************************************"

    HDF5_MAJOR_REL=hdf5-1.10
    HDF5_MINOR_REL=hdf5-1.10.6
    HDF5_SRC_URL=http://support.hdfgroup.org/ftp/HDF5/releases
    cd /tmp
    echo "Getting: ${HDF5_SRC_URL}/${HDF5_MAJOR_REL}/${HDF5_MINOR_REL}/src/${HDF5_MINOR_REL}.tar"
    wget ${HDF5_SRC_URL}/${HDF5_MAJOR_REL}/${HDF5_MINOR_REL}/src/${HDF5_MINOR_REL}.tar
    tar -xvf ${HDF5_MINOR_REL}.tar --directory /usr/local/src
    rm ${HDF5_MINOR_REL}.tar
    cd /usr/local/src/${HDF5_MINOR_REL}
    ./configure --enable-threadsafe --enable-cxx --enable-unsupported --prefix=/usr/local/hdf5/
    make
    make install
    export CPLUS_INCLUDE_PATH=/usr/local/hdf5/include:$CPLUS_INCLUDE_PATH
    export LIBRARY_PATH=/usr/local/hdf5/lib:$LIBRARY_PATH
    export LD_LIBRARY_PATH=/usr/local/hdf5/lib:$LD_LIBRARY_PATH

    echo "*********************************************************"
    echo "Installing Prismatic"
    echo "*********************************************************"
    cd /tmp
    git clone https://github.com/prism-em/prismatic.git && cd prismatic
    mkdir build && cd build
    sed -i 's/sm_30/sm_35/g' ../CMakeLists.txt
    cmake -DCMAKE_PREFIX_PATH=/usr/local/prismatic -DHDF5_ROOT=/usr/local/hdf5/ -DPRISMATIC_ENABLE_CLI=1 -DPRISMATIC_ENABLE_GPU=1 -DPRISMATIC_ENABLE_PYPRISMATIC=1 -DPRISMATIC_ENABLE_GUI=1 -DPRISMATIC_ENABLE_DOUBLE_PRECISION=0 ..
    make -j
    make install

    echo "*********************************************************"
    echo "Installing PyPrismatic"
    echo "*********************************************************"
    cd ..
    python3 setpy.py install --enable-gpu




%runscript
    exec /usr/bin/tini -- /bin/bash "$@"
%startscript
    exec /usr/bin/tini -- /bin/bash "$@"
